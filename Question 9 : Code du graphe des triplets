import matplotlib.pyplot as plt
import networkx as nx
from itertools import combinations

# Liste des 16 triplets orthogonaux (les triplets sont déjà donnés)
triplets = [
    [[1.0, 0.0, 1.0], [-1.0, 0.0, 1.0], [0.0, 1.0, 0.0]],
    [[1.0, 0.0, 1.0], [-0.7071067811865476, 1.0, 0.7071067811865476], [0.7071067811865476, 1.0, -0.7071067811865476]],
    [[1.0, 1.0, 0.0], [0.0, 0.0, 1.0], [-1.0, 1.0, 0.0]],
    [[1.0, 1.0, 0.0], [0.7071067811865476, -0.7071067811865476, 1.0], [-0.7071067811865476, 0.7071067811865476, 1.0]],
    [[1.0, -0.7071067811865476, -0.7071067811865476], [1.0, 0.7071067811865476, 0.7071067811865476], [0.0, -1.0, 1.0]],
    [[1.0, 0.7071067811865476, -0.7071067811865476], [1.0, -0.7071067811865476, 0.7071067811865476], [0.0, 1.0, 1.0]],
    [[1.0, -0.7071067811865475, 0.0], [0.0, 0.0, 1.0], [0.7071067811865475, 1.0, 0.0]],
    [[1.0, 0.7071067811865475, 0.0], [0.0, 0.0, 1.0], [-0.7071067811865475, 1.0, 0.0]],
    [[1.0, 0.0, 0.0], [0.0, -1.0, 1.0], [0.0, 1.0, 1.0]],
    [[1.0, 0.0, 0.0], [0.0, 0.0, 1.0], [0.0, 1.0, 0.0]],
    [[1.0, 0.0, 0.0], [0.0, -0.7071067811865475, 1.0], [0.0, 1.0, 0.7071067811865475]],
    [[1.0, 0.0, 0.0], [0.0, 0.7071067811865475, 1.0], [0.0, 1.0, -0.7071067811865475]],
    [[1.0, 0.0, -0.7071067811865475], [0.7071067811865475, 0.0, 1.0], [0.0, 1.0, 0.0]],
    [[1.0, 0.0, 0.7071067811865475], [-0.7071067811865475, 0.0, 1.0], [0.0, 1.0, 0.0]],
    [[-1.0, 0.0, 1.0], [-0.7071067811865476, 1.0, -0.7071067811865476], [0.7071067811865476, 1.0, 0.7071067811865476]],
    [[-0.7071067811865476, -0.7071067811865476, 1.0], [0.7071067811865476, 0.7071067811865476, 1.0], [-1.0, 1.0, 0.0]]
]

# Fonction pour vérifier si deux triplets partagent une direction
def share_direction(triplet1, triplet2):
    for direction in triplet1:
        if direction in triplet2:
            return True
    return False

# Création du graphe
G = nx.Graph()

# Ajouter des nœuds pour chaque triplet
for idx, triplet in enumerate(triplets):
    G.add_node(idx, triplet=triplet)

# Ajouter des arêtes entre les triplets qui partagent au moins une direction
for i, j in combinations(range(len(triplets)), 2):
    if share_direction(triplets[i], triplets[j]):
        G.add_edge(i, j)

# Visualisation du graphe
options = {"font_size": 8, "node_size": 100, "node_color": "lightblue",
           "linewidths": 1, "width": 0.5}

# Position des nœuds (disposition circulaire)
pos = nx.circular_layout(G)
plt.figure(figsize=(12, 12))

# Tracer le graphe
nx.draw_networkx(G, pos, **options)

# Ajouter des labels pour les nœuds
labels = {i: f"Triplet {i+1}" for i in range(len(triplets))}
nx.draw_networkx_labels(G, pos, labels, font_size=8)

# Définir les marges et afficher le graphe
plt.title("Graphe des Triplets Orthogonaux")
plt.axis("off")
plt.show()

# Afficher le degré de chaque nœud
degre = G.degree()
for node, degree in degre:
    print(f"Degré du nœud {node+1} (Triplet {node+1}): {degree}")
